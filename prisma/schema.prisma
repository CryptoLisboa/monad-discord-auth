datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     String          @id @default(cuid())
  name                   String?
  username               String?
  avatar                 String?
  discriminator          String?
  public_flags           Int?
  flags                  Int?
  banner                 String?
  accent_color           Int?
  global_name            String?
  avatar_decoration_data Json?
  banner_color           String?
  clan                   String?
  mfa_enabled            Boolean?
  locale                 String?
  premium_type           Int?
  email                  String          @unique
  verified               Boolean?
  emailVerified          DateTime?
  image                  String?
  accounts               Account[]
  sessions               Session[]
  // Optional for WebAuthn support
  Authenticator          Authenticator[]

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  AvatarDecoration AvatarDecoration[]
}

model AvatarDecoration {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset     String
  sku_id    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
